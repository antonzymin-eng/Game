// ============================================================================
// AdministrativeOfficial.h - Individual Administrative Official Management (FIXED)
// Created: September 24, 2025, 2:35 PM PST
// Location: include/game/administration/AdministrativeOfficial.h
// Threading Strategy: Thread-safe data structures, uses utils::RandomGenerator
// ============================================================================

#pragma once
#include <string>
#include <vector>

namespace game {

    enum class OfficialType {
        TAX_COLLECTOR,
        TRADE_MINISTER,
        MILITARY_GOVERNOR,
        COURT_ADVISOR
    };

    enum class OfficialTrait {
        NONE,
        CORRUPT,
        EFFICIENT,
        LOYAL,
        AMBITIOUS,
        EXPERIENCED,
        YOUNG_TALENT,
        WELL_CONNECTED,
        STUBBORN
    };

    /**
     * AdministrativeOfficial - Represents a single government official
     * Threading Strategy: Thread-safe data access, immutable after creation
     * - Uses utils::RandomGenerator for thread-safe random generation
     * - All calculations are deterministic based on current state
     * - Monthly updates use controlled randomness for consistency
     */
    struct AdministrativeOfficial {
        int id;
        std::string name;
        OfficialType type;
        int province_id = -1; // -1 = court official

        // Core stats (0-100)
        int competence;
        int loyalty;
        int age;

        // Traits
        std::vector<OfficialTrait> traits;

        // Status
        int months_in_position;
        int salary_cost;
        float satisfaction; // 0.0-1.0
        bool is_appointed;

        // Events
        int corruption_suspicion = 0; // 0-100
        bool has_pending_event = false;

        AdministrativeOfficial();
        AdministrativeOfficial(int id, const std::string& name, OfficialType type, int province_id = -1);

        // Calculations (thread-safe, deterministic)
        float getEffectiveCompetence() const;
        float getLoyaltyModifier() const;
        int getMonthlyUpkeepCost() const;
        bool isCorrupt() const;

        // Monthly updates (uses thread-safe random generation)
        void processMonthlyUpdate();
        void adjustSatisfaction(float change);

        // Trait helpers
        bool hasTrait(OfficialTrait trait) const;
        void addTrait(OfficialTrait trait);
        std::string getTraitDescription(OfficialTrait trait) const;
        std::string getAllTraitsString() const;

        // Name generation (uses thread-safe random generation)
        static std::string generateRandomName();
        static AdministrativeOfficial generateRandomOfficial(int id, OfficialType type, int province_id = -1);
    };

} // namespace game